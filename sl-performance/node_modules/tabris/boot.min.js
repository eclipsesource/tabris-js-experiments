/*!
 * Tabris.js 3.0.0-beta1-dev.20180925+0310
 *
 * Copyright (c) 2014, 2017 EclipseSource Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Tabris.js nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
(function(){
'use strict';
global.bootStart = Date.now();
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FILE_POSTFIXES = ['', '.js', '.json', '/package.json', '/index.js', '/index.json'];
var FOLDER_POSTFIXES = ['/package.json', '/index.js', '/index.json'];

var Module = function () {
  function Module(id, parent, content) {
    _classCallCheck(this, Module);

    this.id = id || null;
    this.parent = parent || null;
    var exports = {};
    var resolved = false;
    var require = this.require.bind(this);
    this._cache = this.parent ? this.parent._cache : {};
    if (id) {
      this._cache[id] = this;
    }
    Object.defineProperty(this, 'exports', {
      set: function (value) {
        exports = value;
      },
      get: function () {
        if (!resolved) {
          resolved = true;
          if (typeof content === 'function') {
            content(this, exports, require, id.slice(1), dirname(id).slice(1));
          } else if (content instanceof Object) {
            exports = content;
          }
        }
        return exports;
      }
    });
  }

  _createClass(Module, [{
    key: 'require',
    value: function require(request) {
      if (request.slice(0, 1) !== '.') {
        if (this._cache[request]) {
          return this._cache[request].exports;
        }
        return findNodeModule.call(this, request).exports;
      }
      return findFileModule.call(this, request).exports;
    }
  }], [{
    key: 'createLoader',
    value: function createLoader(url) {
      var result = void 0;
      try {
        result = tabris._client.loadAndExecute(url, modulePrefix, modulePostfix);
      } catch (ex) {
        throw new Error('Could not parse ' + url + ':' + ex);
      }
      if (result.loadError) {
        return null;
      }
      return result.executeResult;
    }
  }, {
    key: 'readJSON',
    value: function readJSON(url) {
      var src = tabris._client.load(url);
      if (src) {
        try {
          return JSON.parse(src);
        } catch (ex) {
          throw new Error('Could not parse ' + url);
        }
      }
    }
  }]);

  return Module;
}();

function findFileModule(request) {
  var path = normalizePath(dirname(this.id) + '/' + request);
  var result = findModule.call(this, path, getPostfixes(request));
  if (!result) {
    throw new Error("Cannot find module '" + request + "'");
  }
  return result;
}

function findNodeModule(request) {
  var currentDir = dirname(this.id);
  var postfixes = getPostfixes(request);
  var modulesPath = '/node_modules';
  var filePath = modulesPath + '/' + request;
  var result = void 0;
  do {
    result = findModule.call(this, normalizePath(currentDir + filePath), postfixes);
    currentDir = normalizePath(currentDir + '/..');
    if (currentDir && currentDir.slice(-1 * modulesPath.length) === modulesPath) {
      currentDir = normalizePath(currentDir + '/..');
    }
  } while (!result && currentDir);
  if (!result) {
    throw new Error("Cannot find module '" + request + "'");
  }
  return result;
}

function findModule(path, postfixes) {
  if (path) {
    for (var i = 0; i < postfixes.length; i++) {
      var module = getModule.call(this, path + postfixes[i]);
      if (postfixes[i] === '/package.json') {
        if (getMain(module)) {
          var normalizedPath = normalizePath(path + '/' + getMain(module));
          module = findModule.call(this, normalizedPath, FILE_POSTFIXES);
        } else {
          module = null;
        }
      }
      if (module) {
        return module;
      }
    }
  }
}

function getMain(module) {
  return module && module.exports && module.exports.main;
}

function getModule(url) {
  if (url in this._cache) {
    return this._cache[url];
  }
  if (url.slice(-5) === '.json') {
    var data = Module.readJSON(url);
    if (data) {
      return new Module(url, this, data);
    }
  } else {
    var loader = Module.createLoader(url);
    if (loader) {
      return new Module(url, this, loader);
    }
  }
  this._cache[url] = false;
}

function getPostfixes(request) {
  return request.slice(-1) === '/' ? FOLDER_POSTFIXES : FILE_POSTFIXES;
}

var modulePrefix = '(function (module, exports, require, __filename, __dirname) { ';
var modulePostfix = '\n});';

function dirname(id) {
  if (!id || id.slice(0, 1) !== '.') {
    return './';
  }
  return id.slice(0, id.lastIndexOf('/'));
}

function normalizePath(path) {
  var segments = [];
  var pathSegments = path.split('/');
  for (var i = 0; i < pathSegments.length; i++) {
    var segment = pathSegments[i];
    if (segment === '..') {
      var removed = segments.pop();
      if (!removed || removed === '.') {
        return null;
      }
    } else if (segment === '.' ? segments.length === 0 : segment !== '') {
      segments.push(segment);
    }
  }
  return segments.join('/');
}

/*global document: true */
global.window = global.self = global;
global.tabris = {};

tabris._start = function (client) {
  try {
    tabris._client = client;
    var rootModule = new Module();
    try {
      global.tabrisStart = Date.now();
      rootModule.require('tabris');
      global.tabrisEnd = Date.now();
      tabris._client = client; // required by head.append
    } catch (error) {
      printError('Could not load tabris module:', error);
      return;
    }
    tabris._defineModule = function (id, fn) {
      return new Module(id, rootModule, fn);
    };
    tabris.Module = Module;
    var cordovaScript = document.createElement('script');
    cordovaScript.src = './cordova.js';
    global.cordovaStart = Date.now();
    document.head.appendChild(cordovaScript);
    global.cordovaEnd = Date.now();
    var isWorker = global.workerScriptPath !== undefined;
    if (tabris._init) {
      tabris._init(client, { headless: isWorker });
    }
    var loadModule = function () {
      try {
        if (global.debugClient && !isWorker) {
          global.debugClient.start(rootModule);
        }
        global.appStart = Date.now();
        rootModule.require('./' + (isWorker ? global.workerScriptPath : ''));
        global.appEnd = Date.now();
        tabris.trigger('flush');
      } catch (error) {
        printError('Could not load ' + (isWorker ? 'worker' : 'main module') + ':', error);
      }
    };
    if (tabris._entryPoint) {
      tabris._entryPoint(loadModule);
      delete tabris._entryPoint;
    } else {
      loadModule();
    }
    delete global.workerScriptPath;
    tabris.trigger('flush');
  } catch (error) {
    printError('Could not start tabris:', error);
  }
};

tabris._notify = function () {
  // client may get the reference to _notify before tabris has been loaded
  return tabris._notify.apply(this, arguments);
};

function printError(msg, error) {
  console.print ? console.print('error', msg + (error.stack || error)) : console.error(msg, error);
}
global.bootEnd = Date.now();
}());